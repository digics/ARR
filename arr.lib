
# 450 + 200 + 200 + 60 + 50 + 100 - 50 - 50 == 950
# retai() or retais() - return indexes
# mov/def/let::aa( D, S, L ??? )




#_________________________________________________________________
# ::aia() family #################################################
#
# …::aia( D, i, S )
#
#	`D[ `i ] <= `S[ `i ]
#
#	copy `S[ `i ] (if exist) to `D[ `i ]
# 
#		`D	- destination array
#
#		`i	- index copied
#
#		`S	- source array
#
#	returns `i
#
# mov::aia		if `i is not exist in `S then do nothing.
#
# def::aia		if `i is not exist in `S then `D[ `i ] will be deleted
#			if `i is exist in destination array `D then it's will be always
#			deleted and then redefined in `D[ `i ] as the empty subarray
#
# let::aia		if `i is not exist in `S then do nothing.
#			if `S[ `i ] and D[ `i ] are both subarrays then `S[ `i ]-indexes copied that's
#			not exist in destination subarray `D[ `i ]
#
# parameter `i may be string or array:
#
# if `i is untyped then its will remains untyped and index "" will
# be copied from the source array `S to destination array `D
#
# if `i is not an array then `i contains exact index string that will
# be copied from the source array `S to destination array `D
#
#	let::aia( D, "A", S )
#
#		copy (if exist) index "A" from the source array `S to destination array `D
#
#		returns `i ( "A" )
#
# if `i is an array
#
#	then for each p in aray `i
#
#		if `i[ p ] is not an array
#
#			`i[ p ] contains index to copy from `S to `D
#
#		orherwise
#
#
#
#	returns `i[ 1 ]
#
#	mov::aia( D, A, S, split( "ABC", A, "" ) )
#
#		note that 4th parameter isn't supported by let:aia() but it's allowing
#		to place it w/o any affect to functionality (same for def::aia and let::aia)
#
#		copy from the source array `S to destination array `D indexes:
#
#			`D[ "A" ] <= `S[ "A" ]
#			`D[ "B" ] <= `S[ "B" ]
#			`D[ "C" ] <= `S[ "C" ]
#
#		returns the content of `i[ 1 ] ( "A" )
#
#		if index in array `i is not an array then it's contains
#		exact string of index that's should be copied from the source array `S
#		to destination array `D 
#
#		if index in array `i is subarray then this index will be defined
#		as subarray in the target array T - and let::ia() will self-called with
#		`i[ ii ] and T[ ii ] as the 1st and 2nd parameters appropriately
#
#		this allows to copy list of exact indexes
#
#			I[ "A" ][ 1 ] = "A1"
#			I[ "A" ][ 2 ] = "A2"
#			I[ "A" ][ "A3" ][ 1 ] = "A31"
#			I[ "A" ][ "A3" ][ 2 ] = "A32"
#
#			print dump::a( I )
#
#				mov::aia( D, I, S )
#
#			print dump::a( D )
#
#		outputs:
#
#			I[ "A" ][ 1 ] = "A1"
#				  [ 2 ] = "A2"
#				  [ "A3"][ 1 ] = "A31"
#					   [ 2 ] = "A32"
#
#			D[ "A" ][ "A1" ][ ...
#				  [ "A2" ][ ...
#				  [ "A3" ][ "A31" ][ ...
#				  	    [ "A32" ][ ...
#

#_________________________________________________________________
# ::ia() family ##################################################
#
# def::ia	define index `i in the target array `T as an subarray
#		if index `i is already exist in the target array `T then it's will be deleted
#		and then redefined as the empty subarray
#		returns `i
#
# let::ia	define index `i in the target array `T as an subarray
#		if index `i is already defined as an subarray in the target array `T
#		then do nothing. otherwise if `i is exist in the target array `T and it's not subarray
#		then its will be deleted
#		and then redefined as the empty subarray
#		returns `i
#
# Del::ia	delete index `i in the target array `T in case if `i is exist in `T
#		return `i
#
# parameter `i may be string or array allowing user to define :
#
# if `i is untyped then its will remains untyped and index "" will
# be defined as an subarray (or deleted in case of Del::ia() )in the target array `T
#
# if `i is not an array then `i contains exact index string that should be
# defined as an subarray (or deleted in case of Del::ia() ) in the target array `T
#
#	let::ia( "A", T )
#
#		creates in array `T subarray: T[ "A" ][ ...
#
#		returns `i ( "A" )
#
#		this allows to provide undefined subarrays:
#
#			split( …, T[ let::ia( "A", T ) ], … )
#
#				provides undefined subarray T[ "A" ] as the
#				target array for split()
#
#			print dump::a( T )
#
#		outputs:
#
#			T[ "A" ][ …
#
# if `i is an array then each index in array `i contains
# index string that should be defined as the subarray in
# the target array T:
#	
#	let::ia( A, T, split( "ABC", A, "" ) )
#
#		note that 3rd parameter isn't supported by let:ia() but it's allowing
#		to place it w/o any affectint to let::ia (same for def::ia and Del::ia)
#
#		defines in the target array `T subarrays:	 T[ "A" ][ ...
#									 T[ "B" ][ ...
#									 T[ "C" ][ ...
#
#		returns the content of `i[ 1 ] ( "A" )
#
#		if index in array `i is not an array then it's contains
#		exact string of index that's should be defined in the target array `T
#		(as in example above)
#
#		if index in array `i is subarray then this index will be defined
#		as subarray in the target array T - and let::ia() will self-called with
#		`i[ ii ] and T[ ii ] as the 1st and 2nd parameters appropriately
#
#		this allows to define array structers including defining subarrays in
#		defined indexes:
#
#			I[ "A" ][ 1 ] = "A1"
#			I[ "A" ][ 2 ] = "A2"
#			I[ "A" ][ "A3" ][ 1 ] = "A31"
#			I[ "A" ][ "A3" ][ 2 ] = "A32"
#
#			print dump::a( I )
#
#				let::ia( I, T )
#
#			print dump::a( T )
#
#		outputs:
#
#			I[ "A" ][ 1 ] = "A1"
#				  [ 2 ] = "A2"
#				  [ "A3"][ 1 ] = "A31"
#					   [ 2 ] = "A32"
#
#			T[ "A" ][ "A1" ][ ...
#				  [ "A2" ][ ...
#				  [ "A3" ][ "A31" ][ ...
#				  	    [ "A32" ][ ...









#_________________________________________________________________
# ARR v1.1 ( 2024.12.1 ) #########################################
#
#	by digi_cs 2024
#
#	PLEASE DOWNLOAD LATEST VERSION FROM: github.com/digics/ARR
#
#_______________________________________________
#
# 1.0 > 1.1:
#
#	dump::a() implemented ( dump::ab() still not present )
#
#	def::ia / let::ia
#
#	def::aia / let::aia / mov::aia
#
#		parameter `i may be an array providing index structure
#		(including subindexes) to be copied
#
#
#	let::aa/def::aa - updated (due to untyped elements; also mov:aa, mov-def-let::iav)
#
#_______________________________________________
#
#	funcset:
#
#		??? Del::ra ????
#

#_____________________________________________________
# ARR gawk library v1.1 ##############################
#
#	by digi_cs ( 2024.11 - 2025.2 )
#
#	github.com/digiccs

#	recommended to use with uid library available at github
#
#_________________________________________
#
# 1.00 vs 1.1
#
#	- bug fixed about retab() ( B[ 0 ] element missed )
#
#	- funcs dump::a() implemented
#
# !	- def::ia(), let::ia() and Del::ia() -  parameter `i may be an array providing index structure
#	(including subindexes) to be defined/deleted
#
# !	- def/let/mov::aa() and def/let/mov::iav() and  all other: iai(), aia() and iaia() alg updated
#	(due to untyped elements to be copied)
#
# !	- def/let/mov::iav() and def/let/mov::aia() - parameter `i may be an array providing index structure
#	(including subindexes) to be created
#
# ?	- delete hid support ?
#
# !	- publishing library resources in 'global::' namespace
#
#	- 
#
#_________________________________________
#
# FUNCSET:
#
#		def::ia( i, A )			define A[ i ] as the empty subarray(s); returns i
#		let::ia( i, A )			define A[ i ] as the subarray(s) - if it's already not; returns i
#		Del::ia( o, A )			delete A[ i ]
#
#		mov::aa( D, S )			
#		def::aa( D, S )			
#		let::aa( D, S )			
#
#		mov::iav( i, A, v )		
#		def::iav( i, A, v )		
#		let::iav( i, A, v )		
#
#		mov::iai( d, A, s )		
#		def::iai( d, A, s )		
#		let::iai( d, A, s )		
#
#		mov::aia( D, i, S )		
#		def::aia( D, i, S )		
#		let::aia( D, i, S )		
#
#		mov::iaia( d, D, s, S )		
#		def::iaia( d, D, s, S )		
#		let::iaia( d, D, s, S )		
#
#		dump::a( A, "name~regex" )	return text that is the dump of array A
#							check if name is empty after splitting it's from the regexp
#
#	n/a	dump::ab( A, B )			return text that is the dump of arrays: A and B
#							dumps of A and B are will be horizontally separated
#
#		arr::name
#		arr::same
#
#		ret::a
#		ret::ad
#		ret::as
#		ret::ab		bug fixed (after-patsplit arrays)
#		ret::abs#
#
# 































#_________________________________________________________________
##################################################################

@namespace	 "arr"

BEGIN{

	_NS			= "arr"

	init0() }

	#_______________________

	func	init0() {

		if ( NAME_ == "" ) {

			NS_				= _NS "::"

			NAME_				= hid()
			ARRNAME_			= hid()

			HID[ ARRNAME_ ]		= "HID"

			FUNC::TAB[ ARRNAME_ ]	= "FUNC::TAB"

			FUNC::TAB[ NS_ "func_iuhcve4yhc845734c5989" ]

			var_7923c4287h23747x982748

			_IDXSCAN[ NS_ "var_7923c4287h23747x982748" ] = "SYMTAB"
			_IDXSCAN[ NS_ "func_iuhcve4yhc845734c5989" ] = "FUNCTAB" } }

			func	func_iuhcve4yhc845734c5989() { }

#_________________________________________________________________
##################################################################

func	mov::aia( D, i, S ,ii ) {

	switch ( awk::typeof( i ) ) {

		case "array":

			if ( ! same( D, S ) )

				for ( ii in i )

					if ( isarray( i[ ii ] ) ) {

						if ( ii in S )

							mov::aia( D[ let::ia( ii, D ) ], i[ ii ], S[ ii ] ) }

					else	if ( ( ii = i[ ii ] ) in S )

							mov::aia( D[ let::ia( ii, D ) ], ii, S[ ii ] )

			return i[ 1 ]

		case "untyped":

			return mov::aia( D, "", S ) }

	if ( same( D, S ) )

		return i

	if ( i in S )

		return mov::iav( i, D, S[ i ] )

	return i }


#_____________________________________________________
######################################################

func	def::aia( D, i, S ,ii ) {

	switch ( awk::typeof( i ) ) {

		case "array":

			if ( ! same( D, S ) )

				for ( ii in i )

					if ( isarray( i[ ii ] ) )

						if ( ii in S )

							def::aia( D[ def::ia( ii, D ) ], i[ ii ], S[ ii ] )

						else	delete D[ ii ]

					else	if ( ( ii = i[ ii ] ) in S )

							def::aia( D[ def::ia( ii, D ) ], ii, S[ ii ] )

						else	delete D[ ii ]

			return i[ 1 ]

		case "untyped":

			return def::aia( D, "", S ) }

	if ( same( D, S ) )

		return i

	if ( i in S )

		return def::iav( i, D, S[ i ] )

	else

		delete D[ i ]

	return i }

#_____________________________________________________
######################################################

func	let::aia( D, i, S ,ii ) {

	switch ( awk::typeof( i ) ) {

		case "array":

			if ( ! same( D, S ) )

				for ( ii in i )

					if ( isarray( i[ ii ] ) ) {

						if ( ii in S )

							let::aia( D[ let::ia( ii, D ) ], i[ ii ], S[ ii ] ) }

					else	if ( ( ii = i[ ii ] ) in S )

							let::aia( D[ let::ia( ii, D ) ], ii, S[ ii ] )

			return i[ 1 ]

		case "untyped":

			return let::aia( D, "", S ) }

	if ( same( D, S ) )

		return i

	if ( i in S )

		return let::iav( i, D, S[ i ] )

	return i }

#___________________________________________________________
############################################################

func	def::ia( i, T , v ,ii,I ) {

	switch ( awk::typeof( i ) ) {

		case "array":

			for ( ii in i )

				if ( isarray( i[ ii ] ) )

					I[ ii ]

				else	def::ia( i[ ii ], T )

			for ( ii in I )

				def::ia( i[ ii ], T[ let::ia( ii, T ) ] , "." )

			if ( v == "" && 1 in i )

				return i[ 1 ]

			return

		case "untyped":

			return def::ia( "", T ) }

	if ( i in T )

		delete T[ i ]

	T[ i ][ "" ]

	delete T[ i ][ "" ]

	return i }

#_____________________________________________________
######################################################

func	let::ia( i, T ,ii ) {

	switch ( awk::typeof( i ) ) {

		case "array":

			for ( ii in i )

				if ( isarray( i[ ii ] ) )

					let::ia( i[ ii ], T[ let::ia( ii, T ) ] )

				else	let::ia( i[ ii ], T )

			return i[ 1 ]

		case "untyped":

			return let::ia( "", T ) }

	if ( i in T )

		if ( isarray( T[ i ] ) )

			return i

		else	delete T[ i ]

	T[ i ][ "" ]

	delete T[ i ][ "" ]

	return i }

#_____________________________________________________
######################################################

func	del::ia( i, T ,ii ) {

	# Del:ia() with the given `i in array form: if `i[ ... ] is the subarray
	# then this subarray will not been deleted but even defined as the subarray
	# (if its already not) and indexes inside subarray `i[ ... ] will be handled
	# similary
	#_______________________
	
	switch ( awk::typeof( i ) ) {

		case "array":

			for ( ii in i )

				if ( isarray( i[ ii ] ) )

					Del::ia( i[ ii ], T[ let::ia( ii, T ) ] )

				else	Del::ia( i[ ii ], T )

			return i[ 1 ]

		case "untyped":

			return Del::ia( "", T ) }

	if ( i in T )

		delete T[ i ]

	return i }


#___________________________________________________________
############################################################

func	mov::aa( D, S ,i ) {

	# D < S
	# sorted_in ????
	#	returns -
	#_______________________

	"" in D in S

	if ( same( D, S ) )

		return

	for ( i in S )

		switch ( isarray( S[ i ] ) isarray( D[ i ] ) ) {

			case "10":

				delete D[ i ]

				D[ i ][ "" ]

				def::aa( D[ i ], S[ i ] )

				continue

			case "11":

				mov::aa( D[ i ], S[ i ] )

				continue

			case "01":

				delete D[ i ]

			case "00":

				if ( typeof( S[ i ] ) == "untyped" ) {

					if ( typeof( D[ i ] ) != "untyped" ) {

						delete D[ i ]

						D[ i ] }

					continue }

				else

					D[ i ] = S[ i ] } }

#_____________________________________________________
######################################################

func	def::aa( D, S ,i ) {

	# D = S
	#
	#	returns -
	#_______________________

	"" in D in S

	if ( same( D, S ) )

		return

	delete D

	for ( i in S )

		switch ( awk::typeof( S[ i ] ) ) {

			case "array":

				D[ i ][ "" ]

				def::aa( D[ i ], S[ i ] )

				continue

			case "untyped":

				D[ i ]

				continue

			default:

				D[ i ] = S[ i ] } }

#_____________________________________________________
######################################################

func	let::aa( D, S ,i ) {

	# D << S
	#
	#	returns -
	#_______________________

	"" in D in S

	if ( same( D, S ) )

		return

	for ( i in S )

		if ( ! ( i in D ) )

			switch ( awk::typeof( S[ i ] ) ) {

				case "array":

					D[ i ][ "" ]

					def::aa( D[ i ], S[ i ] )

					continue

				case "untyped":

					D[ i ]

					continue

				default:

					D[ i ] = S[ i ] } }


#___________________________________________________________
############################################################

func	mov::iav( i, A, V ) {

	# A[ i ] += V
	#
	# if V is untyped then do nothing
	#
	#	returns i
	#_______________________

	switch ( isarray( A[ i ] ) typeof( V ) ) {

		case "1array":

			mov::aa( A[ i ], V )

			return i

		case "0array":

			delete A[ i ]

			A[ i ][ "" ]

			def::aa( A[ i ], V )

			return i

		case "1untyped":

		case "0untyped":

			return i

		case /^1/:
		
			delete A[ i ]

		default:

			A[ i ] = V

			return i } }

#_____________________________________________________
######################################################

func	def::iav( i, A, V ) {

	# A[ i ] = V
	#
	# if V is untyped then delete A[ i ]
	#
	#	returns i
	#_______________________

	switch ( typeof( V ) ) {

		case "array":

			delete A[ i ]

			A[ i ][ "" ]

			def::aa( A[ i ], V )

			return i

		case "untyped":

			delete A[ i ]

			return i
		
		default:

			if ( isarray( A[ i ] ) )

				delete A[ i ]

			A[ i ] = V

			return i } }

#_____________________________________________________
######################################################

func	let::iav( i, A, V ) {

	# A[ i ] << V
	#
	# if V is untyped then do nothing
	#
	#	returns i
	#_______________________

	switch ( isarray( A[ i ] ) typeof( V ) ) {

		case "1array":

			let::aa( A[ i ], V )

			return i

		case "0array":

			delete A[ i ]

			A[ i ][ "" ]

			def::aa( A[ i ], V )

		case "0untyped":

		case "1untyped":

			return i

		case /^1/:

			delete A[ i ]

		default:

			A[ i ] = V

			return i } }


#___________________________________________________________
############################################################

func	mov::iai( d, A, s ) {

	# A[ d ] < A[ s ]
	#
	#	if NOT s in A then do nothing
	#
	#	returns d
	#_______________________

	if ( d == s )

		return d

	if ( s in A )

		return mov::iav( d, A, A[ s ] )

	return d }

#_____________________________________________________
######################################################

func	def::iai( d, A, s ) {

	# A[ d ] = A[ s ]
	#
	#	if NOT s in A then delete A[ d ]
	#
	#	returns d
	#_______________________

	if ( d == s )

		return d

	if ( s in A )

		return def::iav( d, A, A[ s ] )

	else	delete A[ d ]

	return d }

#_____________________________________________________
######################################################

func	let::iai( d, A, s ) {

	# A[ d ] ?= A[ s ]
	#
	#	if NOT s in A then do nothing
	#
	#	returns d
	#_______________________

	if ( d == s )

		return d

	if ( s in A )

		return let::iav( d, A, A[ s ] )

	return d }





#___________________________________________________________
############################################################

func	mov::iaia( d, D, s, S ) {

	# D[ d ] += S[ s ]
	#
	#	if NOT s in S then do nothing
	#
	#	returns d
	#_______________________

	if ( d == s && same( D, S ) )

		return d

	if ( s in S )

		return mov::iav( d, D, S[ s ] )

	return d }

#_____________________________________________________
######################################################

func	def::iaia( d, D, s, S ) {

	# D[ d ] = S[ s ]
	#
	# if NOT s in S then delete D[ d ]
	#
	#	returns d
	#_______________________

	if ( d == s && same( D, S ) )

		return d

	if ( s in S )

		return def::iav( d, D, S[ s ] )

	else	delete D[ d ]

	return d }

#_____________________________________________________
######################################################

func	let::iaia( d, D, s, S ) {

	# D[ d ] ?= S[ s ]
	# 
	#	if NOT s in S then do nothing
	#
	#	returns d
	#_______________________

	if ( d == s && same( D, S ) )

		return d

	if ( s in S )

		return mov::iav( d, D, S[ s ] )

	else	delete D[ d ]

	return d }


#___________________________________________________________
############################################################

func	symtab( i, v ) {

	if ( i in SYMTAB )

		SYMTAB[ i ] = v }

#_____________________________________________________
######################################################

func	same( A, B ,r ) {

	# returns 1 in case if array A is the same array as the array B
	#_____________________________

	if ( NAME_ == "" )

		init0()

	A[ NAME_ ]

	r = NAME_ in B

	delete A[ NAME_ ]

	return r }

#_____________________________________________________
######################################################

func	name( A ,i ) {

	# return name of the global array A
	#
	#	if A is not global array then return null
	#_____________________________

	if ( NAME_ == "" )

		init0()

	if ( ARRNAME_ in A )

		return A[ ARRNAME_ ]

	for ( i in _IDXSCAN )

		if ( i in A )

			return _IDXSCAN[ i ]

	A[ NAME_ ]

	for ( i in SYMTAB )

		if ( isarray( SYMTAB[ i ] ) )

			if ( NAME_ in SYMTAB[ i ] )

				if ( ! ( ARRNAME_ in SYMTAB[ i ] ) ) {

					delete A[ NAME_ ]

					if ( NAME_ in SYMTAB[ i ] )

						A[ NAME_ ]

					else	return i }

	delete A[ NAME_ ] }

#___________________________________________________________
############################################################

func	dump::a( A, n ,r,a,D ) {

	# return text that's is a dump of the given array A
	#_____________________________

	switch ( awk::typeof( A ) ) {

		case "untyped":

			return ln( "\x85" )

		case "unassigned":

			return ln( "-" )

		case "array":

			break

		default:

			return ln( A "'" ) }

	#_______________________

	if ( sub( /^~/, "", n ) ) {

		r = n; n = "" }

	else	r = ""

	#_______________________

	if ( n == "" )

		n = name( A )

	#_______________________

	if ( length( A ) ) {

		"" in D

		#a = sorted_in( NS_ "dumpa_sort" )

		dumpa_0( D, A, n, 1, r )

		#sorted_in( a )

		return ret::a( D ) }

	return ln( n ) }

	#_____________________________

	func	dumpa_sort( i1, v1, i2, v2 ) {

		}

	#_____________________________

	func	dumpa_0( D, A, px, f, r ,i,x ) { 

		for ( i in A ) {

			if ( i !~ r )

				continue

			x = px "[ " dumpa_idx( i ) " ]"

			if ( f ) {

				f = 0

				px = blank( px ) }

			switch ( typeof( A[ i ] ) ) {

				case "array":

					if ( length( A[ i ] ) )

						dumpa_0( D, A[ i ], x, 1, r )

					else

						D[ length( D ) ] = ln( x )

					continue

				case "untyped":

					D[ length( D ) ] = ln( x " ?" )

					continue

				default:

					D[ length( D ) ] = ln( x " = " dumpa_val( A[ i ] ) ) } } }

		#_______________________

		func	dumpa_idx( i ) {

			if ( i in HID )

				return dumpa_hid( i )

			if ( i in CLASS )

				return dumpa_class( i )

			if ( i in PARENT )

				return dumpa_ptr( i )

			return i }

		#_______________________

		func	dumpa_val( v ,t ) {

			switch ( t = awk::typeof( v ) ) {

				case "number":
				case "strnum":
				case "number|bool":

					return v

				case "string":

					if ( v in HID )

						return dumpa_hid( v )

					if ( v in CLASS )

						return dumpa_class( v )

					if ( v in PARENT )

						return dumpa_ptr( v )

					return v "'"

				case "regexp":

					return "~/" v "/"

				case "unassigned":

					return "-"

				default:

					print "oo: " t "'"

					return "\x85" } }

		#_______________________

		func	dumpa_hid( v ) {

			return "$" hid::name( v ) }

		#_______________________

		func	dumpa_ptr( p ,t ) {

			if ( ! ( p in DUMPA_PTR ) ) {

				t = "000000000" length( DUMPA_PTR )

				t = substr( t, length( t ) - 5 )

				t = "`" t
				
				DUMPA_PTR[ p ] = t }

			return DUMPA_PTR[ p ] }

		#_______________________

		func	dumpa_class( p ,t ) {

			return p

			if ( ! ( p in DUMPA_CLASS ) ) {

				t = CLASS[ p ]

				t = "^" t

				DUMPA_CLASS[ p ] = t }

			return DUMPA_CLASS[ p ] }







#_____________________________________________________
######################################################

func	dump::ab( A, B ) {

	# return text that's is a dump of the two given arrays
	#
	#	not implemented
	#_______________________
	
	}

#___________________________________________________________
############################################################

func	ret::a( A,ia,q,s, sp, b,sb ) {

	switch ( type2( A, sp ) ) {

		case "AA":

			return retab_0( A, sp, ia, q, b, s, sb )

		case "AS":

			return retas_0( A, sp, ia,q,s )

		case "SA":

			return retas_0( sp, A, ia,q,s )

		case "AU":

			return reta_0( A,ia,q,s )

		case "UA":

			return reta_0( sp,b,q,sb ) } }

#_____________________________________________________
######################################################

func	ret::ad( A, s,q,a, sp, b,sb ) {

	return ret::a( A, a,q,s, sp, b,sb ) }

#_____________________________________________________
######################################################

func	ret::as( A, sp, a,q,s, b,sb ) {

	return ret::a( A, a,q,s, sp, b,sb ) }

#_____________________________________________________
######################################################

func	ret::ab( A, B, a,q, b, s,sb, sp ) {

	if ( sp == "" )

		return ret::a( A,a,q,s, B,b,sb )

	return ret::abs( A, B, sp, a, q, b, s, sb ) }

#_____________________________________________________
######################################################

func	ret::abs( A, B, sp, a,q, b, s,sb ) {

	if ( sp == "" )

		return ret::a( A, a,q,s, B, b,sb )

	switch ( type2( A, B ) ) {

		case "AA":

			return retabs_0( A, a,s, B, b,sb, q, sp )

		case "AS":

			return retas_0( A, B sp, a,q,s )

		case "SA":

			return retas_0( B, A sp, a,q,s )

		case "AU":

			return retas_0( A, sp, a,q,s )

		case "UA":

			return retas_0( B, sp, b, q, sb ) } }

#_________________________________________________________________
func	reta_0( A, a,q,s, f ,a0,D ) { ##############################

	if ( ! get_startlen( A, a,q,s, f ) )

		return

	a = I0

	s = S0 + S0

	if ( f = and( Q0, 1 ) ) {

		f = length( A[ a ] )

		a0 = a

		a += S0 }

	print "HREE: " q "'"


	if ( 64 > q = rshift( Q0, 1 ) )

		if ( q ) {

			q = "arr::retab_" q

			return @q( A,a,s, A,a + S0,s, f ? A[ a0 ] : "" ) }

		else	if ( f )

				return A[ a0 ]

			else	return

	return retab( D, q, A,a,s, A,a + S0,s, f ? A[ a0 ] : "" ) }

#___________________________________________________________
func	retas_0( A, sp, a,q,s, f ,B,D ) { ####################

	if ( f != "0" )

		if ( ! get_startlen( A, a,q,s, f ) )

			return

	if ( Q0 == 1 )

		return A[ I0 ]

	B[ 0 ] = sp
 
	if ( Q0 < 64 ) {

		q = NS_ "retab_" Q0

		return @q( B,"",0, A,I0,S0 ) }

	return retab( D, Q0, B,"",0, A,I0,S0 ) }

#___________________________________________________________
func	retab_0( A, B, a,q, b, s, sb ,D ) { ##################

	switch ( get_startlen( B, b,q,sb, "b" ) get_startlen( A, a,q,s, "a" ) ) {

		case "AAAA":

			# a == b == s == sb == ""

			if ( I0 != I1 )

				if ( I1 < I0 ) {

					D[ 0 ] = B[ I1 ]

					I1 += S1 }

				else

					if ( --Q0 ) {

						D[ 0 ] = A[ I0 ]

						I0 += S0 }

					else	return A[ I0 ]

			break

		case "00":

			return

		case /^0/:

			return reta_0( A, "", "", "", "0" )

		case /0$/:

			return reta_0( B, "", "", "", "1" ) }

	return retab( D, Q0, A,I0,S0, B,I1,S1 ) }

#___________________________________________________________
func	retabs_0( A, a,s, B, b,sb, q, sp ,D ) { ##############

	switch ( get_startlen( B, b, "-", sb, "b" ) get_startlen( A, a,q,s, "a" ) ) {

		case "00":

			return

		case /^0/:

			return retas_0( A, sp, "", "", "", "0" )

		case /0$/:

			return retas_0( B, sp, "", "", "", "1" ) }

	if ( Q0-- ) {

		"" in D

		while ( Q0-- ) {

			D[ length( D ) ] = A[ a ] B[ b ] sp

			a += s; b += sb }

		D[ length( D ) ] = A[ a ] B[ b ]

		if ( 64 < q = length( D ) )

			air64( D, q )

		if ( length( D ) > 1 )

			return  D[0]  D[1]D[2]D[3]D[4]D[5]D[6]D[7]D[8]D[9]D[10]D[11]D[12]D[13]D[14]D[15]D[16]D[17]D[18]D[19]D[20]D[21]D[22]D[23]D[24]D[25]D[26]D[27]D[28]D[29]D[30]D[31]D[32]D[33]D[34]D[35]D[36]D[37]D[38]D[39]D[40]D[41]D[42]D[43]D[44]D[45]D[46]D[47]D[48]D[49]D[50]D[51]D[52]D[53]D[54]D[55]D[56]D[57]D[58]D[59]D[60]D[61]D[62]D[63] #  xdup 64 [0-9]+

		return D[ 0 ] } }

#_________________________________________________________________
func	get_startlen( A, i,q,s, f ) { ##############################
 
	#	I		- start index
	#	S		- requested index step
	#	Q		- number of elements to join
	#	X		- array index step
	#	F		- first index
	#	L		- last index
	#	R		- result (internal)
	#_______________________

	switch ( f ) {

		case "":

			if ( typeof( A ) == "array" )

				break

			return 0

		case "a":

			I1 = I0
			S1 = S0
			Q1 = Q0
			X1 = X0
			F1 = F0
			L1 = L0
			R1 = R0

		case "b":

			break

		case "1":

			I0 = I1
			S0 = S1
			Q0 = Q1
			F0 = F1
			L0 = L1
			R0 = R1

		case "0":

		default:

			return R0 }

	if ( ! length( A ) )

		return 0
	#_________________

	F0 = ! ( 0 in A )

	L0 = F0 + len( A ) - 1
	#_________________

	if ( s == "" )

		s = 1

	S0 = s

	#_________________

	if ( i == "" ) {

		R0 = "A"

		i = S0 < 0 ? L0 : F0 }

	else	R0 = "1"

	I0 = i
	#_________________

	if ( q == "" ) {

		R0 = R0 "A"

		q = S0 < 0 ? F0 : L0 }

	else {

		R0 = R0 "1"

		q = I0 + q - 1 }

	q = _abs( q - I0 )

	if ( S0 )

		Q0 = int( q / _abs( S0 ) ) + 1 

	else

		Q0 = q + 1

	return R0 }

	#_______________________

	func	len( A ) {

		if ( typeof( A ) == "array" )

			return length( A )

		return 0 }

#_________________________________________________________________
func	retab( D, q, A,a,x, B,b,y, s ,f,i ) { ######################
	
	# accurate data collecting with the air-factor: x1024/256/64
	#
	#
	# when joining indexes it's data copied to somewhere and this operation 
	# called as 'data pass' is actual performance main load
	# below is the number of data passes depending from the number
	# of index joined:
	#
	# from	to		data pass
	#--------------------------------
	#   1	      63		    1
	#   64     64 K		    2
	#   64K     4 M		    3
	#
	# Array Index Reducer: x1024/256/64
	#_____________________________

	"" in D

	i = 0 in D

	# x1024

	for ( f = rshift( q, 10 ); f; f-- ) {

		if ( length( D[ i ] = A[a]B[b]  A[a+=x]B[b+=y]  A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]  ) )	 #  xdup 1023

			i++

		a += x; b += y }
	#_________________

	# x256

	for ( f = and( rshift( q, 8 ), 3 ); f; f-- ) {

		if ( length( D[ i ] = A[a]B[b]  A[a+=x]B[b+=y]  A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]  ) )		#  xdup 255

			i++

		a += x; b += y }
	#_________________

	# x64

	for ( f = and( rshift( q, 6 ), 3 ); f; f-- ) {

		if ( length( D[ i ] = A[a]B[b]  A[a+=x]B[b+=y]  A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]  ) )	 #  xdup 63

			i++

		a += x; b += y }
	#_________________

	if ( f = and( q, 63 ) ) {

		f = NS_ "retab_" f

		if ( length( D[ i ] = @f( A,a,x, B,b,y ) ) )

			i++ }
	#_______________________

	if ( ! i )

		return s

	delete D[ i ]

	if ( i > 64 )

		air64( D, i )

	if ( length( D ) > 1 )

		return s  D[0]  D[1]D[2]D[3]D[4]D[5]D[6]D[7]D[8]D[9]D[10]D[11]D[12]D[13]D[14]D[15]D[16]D[17]D[18]D[19]D[20]D[21]D[22]D[23]D[24]D[25]D[26]D[27]D[28]D[29]D[30]D[31]D[32]D[33]D[34]D[35]D[36]D[37]D[38]D[39]D[40]D[41]D[42]D[43]D[44]D[45]D[46]D[47]D[48]D[49]D[50]D[51]D[52]D[53]D[54]D[55]D[56]D[57]D[58]D[59]D[60]D[61]D[62]D[63] 	#  xdup 64 [0-9]+

	if ( length( s ) )

		return s D[ 0 ]

	else	return D[ 0 ] }
	#_____________________________

	func retab_1( A,a,x, B,b,y, f ) {

		if ( length( f ) )

			return f A[a]B[b]

		else return A[a]B[b]

	}func retab_2(A,a,x,B,b,y,f){return f A[a]B[b]  A[a+=x]B[b+=y]  # *62
	}func retab_3(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_4(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_5(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_6(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_7(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_8(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_9(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_10(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_11(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_12(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_13(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_14(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_15(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_16(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_17(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_18(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_19(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_20(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_21(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_22(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_23(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_24(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_25(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_26(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_27(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_28(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_29(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_30(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_31(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_32(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_33(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_34(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_35(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_36(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_37(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_38(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_39(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_40(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_41(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_42(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_43(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_44(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_45(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_46(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_47(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_48(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_49(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_50(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_51(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_52(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_53(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_54(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_55(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_56(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_57(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_58(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_59(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_60(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_61(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_62(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}func retab_63(A,a,x,B,b,y,f){return f A[a]B[b]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]A[a+=x]B[b+=y]		# ...
	}
#___________________________________________________________
func	air64( D, q ,c,s,y ) { ###############################

	# Array Index Reducer x64
	#_____________________________

	while ( c = rshift( q, 6 ) ) {

		q = s = 0; y = 1 

		do {	D[ q++ ] =  D[s++]  D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++]D[s++] 	#  xdup 64

			while ( y < s )

				delete D[ y++ ] } while ( c-- ) } }







#_________________________________________________________________
func	typeof( p ) { ##############################################

	return awk::typeof( p ) }

#___________________________________________________________
func	type( A ) { ##########################################

	switch ( typeof( A ) ) {

		case "array":

			if ( length( A ) )

				return "A"

		case "untyped":

			return "U"

		default:

			return "S" } }

#___________________________________________________________
func	type2( A, B ) { ######################################

	return type( A ) type( B ) }

#___________________________________________________________
func	isarray( A ) { #######################################

	return awk::isarray( A ) }
#___________________________________________________________
func	and( a, b ) { ########################################

	return awk::and( a, b ) }

#___________________________________________________________
func	rshift( v, r ) { #####################################

	return awk::rshift( v, r ) }

#___________________________________________________________
func	_abs( v ) { ##########################################

	return v >= 0 ? v : 0 - v }

#___________________________________________________________
func	blank( t ) { #########################################

	gsub( /[\x21-\x7E\x80-\xFF]/, " ", t )

	return t }

#___________________________________________________________
func	sorted_in( v ,r ) { ##################################

	r = PROCINFO[ "sorted_in" ]

	PROCINFO[ "sorted_in" ] = v

	return r }

#___________________________________________________________
func	ln( t ) { ############################################

	return t "\x0A" }

#___________________________________________________________
func	hid( n, c ) { ########################################

	if ( "hid::get" in FUNCTAB )

		return hid::get( n, c )

	if ( n == "" )

		n = "HID" ++_hid_cnt

	if ( n in hid::_NAMECODE )

		return hid::_NAMECODE[ n ]

	if ( c == "" )

		c = "\xFE" n "\xFE"

	hid::_NAMECODE[ HID[ c ] = n ] = c

	return c }

#_______________________________________________________________________
########################################################################

@namespace "global"

BEGIN{

	defia				= "def::ia"
	letia				= "let::ia"
	delia				= "del::ia"

	movaa				= "mov::aa"
	defaa				= "def::aa"
	letaa				= "let::aa"

	moviav			= "mov::iav"
	defiav			= "def::iav"
	letiav			= "let::iav"

	movaia			= "mov::aia"
	defaia			= "def::aia"
	letaia			= "let::aia"

	moviai			= "mov::iai"
	defiai			= "def::iai"
	letiai			= "let::iai"

	moviaia			= "mov::iaia"
	defiaia			= "def::iaia"
	letiaia			= "let::iaia"

	reta				= "ret::a"
	retad				= "ret::ad"
	retas				= "ret::as"
	retab				= "ret::ab"
	retabs			= "ret::abs"

	dumpa				= "dump::a"
	dumpab			= "dump::ab"

	symtab			= "arr::symtab" }

#_______________________________________________________________________
########################################################################


